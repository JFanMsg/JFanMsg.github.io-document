(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{396:function(t,a,s){"use strict";s.r(a);var n=s(45),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_4-基本数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-基本数据类型"}},[t._v("#")]),t._v(" 4. 基本数据类型")]),t._v(" "),s("h1",{attrs:{id:"数据类型的基本介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据类型的基本介绍"}},[t._v("#")]),t._v(" 数据类型的基本介绍")]),t._v(" "),s("p",[t._v("Go语言中有丰富的数据类型，除了基本的整型、浮点型、布尔型、字符串外，还有数组、切片、结构体、函数、map、通道（channel）等。Go 语言的基本类型和其他语言大同小异。")]),t._v(" "),s("h1",{attrs:{id:"整数类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#整数类型"}},[t._v("#")]),t._v(" 整数类型")]),t._v(" "),s("p",[t._v("整型分为以下两个大类： 按长度分为：int8、int16、int32、int64 对应的无符号整型：uint8、uint16、uint32、uint64")]),t._v(" "),s("p",[t._v("其中，"),s("code",[t._v("uint8")]),t._v("就是我们熟知的"),s("code",[t._v("byte")]),t._v("型，"),s("code",[t._v("int16")]),t._v("对应C语言中的"),s("code",[t._v("short")]),t._v("型，"),s("code",[t._v("int64")]),t._v("对应C语言中的"),s("code",[t._v("long")]),t._v("型。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("类型")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("uint8")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("无符号 8位整型 (0 到 255)")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("uint16")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("无符号 16位整型 (0 到 65535)")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("uint32")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("无符号 32位整型 (0 到 4294967295)")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("uint64")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("无符号 64位整型 (0 到 18446744073709551615)")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("int8")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("有符号 8位整型 (-128 到 127)")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("int16")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("有符号 16位整型 (-32768 到 32767)")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("int32")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("有符号 32位整型 (-2147483648 到 2147483647)")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("int64")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("有符号 64位整型 (-9223372036854775808 到 9223372036854775807)")])])])]),t._v(" "),s("h2",{attrs:{id:"int有符号的类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#int有符号的类型"}},[t._v("#")]),t._v(" int有符号的类型")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("类型")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("有无符号")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("占用存储空间")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("表数范围")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("备注")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("int8")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("有")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1字节")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("-128~127")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}})]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("int16")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("有")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("2字节")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("-12(15)~2(15)-1")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("()中的为平方数")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("int32")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("有")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4字节")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("-12(31)~2(31)-1")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("()中的为平方数")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("int64")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("有")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("8字节")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("-12(63)~2(63)-1")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("()中的为平方数")])])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200727105138578.png",alt:"image-20200727105138578"}})]),t._v(" "),s("h2",{attrs:{id:"int-的无符号的类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#int-的无符号的类型"}},[t._v("#")]),t._v(" int 的无符号的类型")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("类型")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("有无符号")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("占用存储空间")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("表数范围")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("备注")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("uint8")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("无")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1字节")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("0~255")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}})]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("uint16")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("无")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("2字节")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("0~2(16)-1")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("()中的为平方数")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("uint32")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("无")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4字节")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("0~2(32)-1")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("()中的为平方数")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("uint64")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("无")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("8字节")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("0~2(64)-1")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("()中的为平方数")])])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200727105717361.png",alt:"image-20200727105717361"}})]),t._v(" "),s("h2",{attrs:{id:"int-的其它类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#int-的其它类型"}},[t._v("#")]),t._v(" int 的其它类型")]),t._v(" "),s("p",[t._v("注意：表中，32为32位系统，64为64位系统，()中的为平方数")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("类型")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("有无符号")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("占用存储空间")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("表数范围")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("备注")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("int")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("有")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("32~4字节 / 64~8个字节")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("-2(31)~2(31)-1 / -2(63)~2(63)-1")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("32位操作系统上就是"),s("code",[t._v("int32")]),t._v("，64位操作系统上就是"),s("code",[t._v("int64")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("uint")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("无")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("32~4字节 / 64~8个字节")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("0~2(32)-1 / 0~2(64)-1")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("32位操作系统上就是"),s("code",[t._v("uint32")]),t._v("，64位操作系统上就是"),s("code",[t._v("uint64")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("rune")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("有")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("与int32一样")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("-2(31)~2(31)-1")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("等价int32，表示一个unicode码")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("byte")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("无")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("与uint8等价")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("0~255")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("当要存储字符时，选用byte")])])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200727110403417.png",alt:"image-20200727110403417"}})]),t._v(" "),s("p",[s("strong",[t._v("注意：")]),t._v(" 在使用"),s("code",[t._v("int")]),t._v("和 "),s("code",[t._v("uint")]),t._v("类型时，不能假定它是32位或64位的整型，而是考虑"),s("code",[t._v("int")]),t._v("和"),s("code",[t._v("uint")]),t._v("可能在不同平台上的差异。")]),t._v(" "),s("p",[s("strong",[t._v("注意事项")]),t._v(" 获取对象的长度的内建"),s("code",[t._v("len()")]),t._v("函数返回的长度可以根据不同平台的字节长度进行变化。实际使用中，切片或 map 的元素数量等都可以用"),s("code",[t._v("int")]),t._v("来表示。在涉及到二进制传输、读写文件的结构描述时，为了保持文件的结构不会受到不同编译目标平台字节长度的影响，不要使用"),s("code",[t._v("int")]),t._v("和 "),s("code",[t._v("uint")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"整型的使用细节"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#整型的使用细节"}},[t._v("#")]),t._v(" 整型的使用细节")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("Golang 各整数类型分：有符号和无符号，int uint 的大小和系统有关")])]),t._v(" "),s("li",[s("p",[t._v("Golang 的整型默认声明为 int 型")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200727110456440.png",alt:"image-20200727110456440"}})])]),t._v(" "),s("li",[s("p",[t._v("Golang 程序中整型变量在使用时，遵守保小不保大的原则，即：在保证程序正确运行下，尽量使用占用空间小的数据类型。【如：年龄】")])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200727110522447.png",alt:"image-20200727110522447"}})]),t._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[t._v("bit: 计算机中的最小存储单位。byte:计算机中基本存储单元。1byte = 8 bit")])]),t._v(" "),s("h2",{attrs:{id:"数字字面量语法-number-literals-syntax"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数字字面量语法-number-literals-syntax"}},[t._v("#")]),t._v(" 数字字面量语法（Number literals syntax）")]),t._v(" "),s("p",[t._v("Go1.13版本之后引入了数字字面量语法，这样便于开发者以二进制、八进制或十六进制浮点数的格式定义数字，例如：")]),t._v(" "),s("p",[s("code",[t._v("v := 0b00101101")]),t._v("， 代表二进制的 101101，相当于十进制的 45。 "),s("code",[t._v("v := 0o377")]),t._v("，代表八进制的 377，相当于十进制的 255。 "),s("code",[t._v("v := 0x1p-2")]),t._v("，代表十六进制的 1 除以 2²，也就是 0.25。")]),t._v(" "),s("p",[t._v("而且还允许我们用 "),s("code",[t._v("_")]),t._v(" 来分隔数字，比如说： "),s("code",[t._v("v := 123_456")]),t._v(" 表示 v 的值等于 123456。")]),t._v(" "),s("p",[t._v("我们可以借助fmt函数来将一个整数以不同进制形式展示。")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 十进制")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d \\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 10")]),t._v("\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%b \\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1010  占位符%b表示二进制")]),t._v("\n \n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 八进制  以0开头")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("077")]),t._v("\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%o \\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 77")]),t._v("\n \n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 十六进制  以0x开头")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" c "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xff")]),t._v("\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%x \\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ff")]),t._v("\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%X \\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// FF")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h1",{attrs:{id:"程序查看某个变量的字节和数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#程序查看某个变量的字节和数据类型"}},[t._v("#")]),t._v(" 程序查看某个变量的字节和数据类型")]),t._v(" "),s("p",[t._v("如何在程序查看某个变量的字节大小和数据类型 （使用较多）")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200727110610360.png",alt:"image-20200727110610360"}})]),t._v(" "),s("h1",{attrs:{id:"小数类型-浮点型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小数类型-浮点型"}},[t._v("#")]),t._v(" 小数类型/浮点型")]),t._v(" "),s("p",[t._v("Go语言支持两种浮点型数："),s("code",[t._v("float32")]),t._v("和"),s("code",[t._v("float64")]),t._v("。这两种浮点型数据格式遵循"),s("code",[t._v("IEEE 754")]),t._v("标准： "),s("code",[t._v("float32")]),t._v("的浮点数的最大范围约为 "),s("code",[t._v("3.4e38")]),t._v("，可以使用常量定义："),s("code",[t._v("math.MaxFloat32")]),t._v("。 "),s("code",[t._v("float64")]),t._v(" 的浮点数的最大范围约为 "),s("code",[t._v("1.8e308")]),t._v("，可以使用一个常量定义："),s("code",[t._v("math.MaxFloat64")]),t._v("。")]),t._v(" "),s("p",[t._v("小数类型就是用于存放小数的，比如 1.2 0.23 -1.911")]),t._v(" "),s("p",[t._v("打印浮点数时，可以使用"),s("code",[t._v("fmt")]),t._v("包配合动词"),s("code",[t._v("%f")]),t._v("，代码如下：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"math"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        fmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%f\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pi"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        fmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%.2f\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pi"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"小数类型分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小数类型分类"}},[t._v("#")]),t._v(" 小数类型分类")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200727193046660.png",alt:"image-20200727193046660"}})]),t._v(" "),s("ol",[s("li",[t._v("关于浮点数在机器中存放形式的简单说明,浮点数=符号位+指数位+尾数位，说明：浮点数都是有符号的")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200727193111693.png",alt:"image-20200727193111693"}})]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("尾数部分可能丢失，造成小数点精度损失。 -123.0000901")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200727193141564.png",alt:"image-20200727193141564"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200727193145564.png",alt:"image-20200727193145564"}})]),t._v(" "),s("ol",[s("li",[s("p",[t._v("float64 的精度比 float32 的要准确")])]),t._v(" "),s("li",[s("p",[t._v("如果我们要保存一个精度高的数，则应该选用 float64")])]),t._v(" "),s("li",[s("p",[t._v(") 浮点型的存储分为三部分：符号位+指数位+尾数位 在存储过程中，精度会有丢失")])])]),t._v(" "),s("h2",{attrs:{id:"浮点型使用细节"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浮点型使用细节"}},[t._v("#")]),t._v(" 浮点型使用细节")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("Golang 浮点类型有固定的范围和字段长度，不受具体 OS(操作系统)的影响。")])]),t._v(" "),s("li",[s("p",[t._v("Golang 的浮点型默认声明为 float64 类型")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200727193334080.png",alt:"image-20200727193334080"}})])]),t._v(" "),s("li",[s("p",[t._v("浮点型常量有两种表示形式")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("十进制数形式：如：5.12 .512 (必须有小数点）")])]),t._v(" "),s("li",[s("p",[t._v("科学计数法形式:如：5.1234e2 = 5.12 * 10 的 2 次方 5.12E-2 = 5.12/10 的 2 次方")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200727193410349.png",alt:"image-20200727193410349"}})])])])]),t._v(" "),s("li",[s("p",[t._v("通常情况下，应该使用 float64 ，因为它比 float32 更精确。[开发中， 推荐使用 float64]")])])]),t._v(" "),s("h2",{attrs:{id:"复数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#复数"}},[t._v("#")]),t._v(" 复数")]),t._v(" "),s("p",[t._v("complex64和complex128，二者分别由float32和float64构成，内置的"),s("code",[t._v("complex")]),t._v("函数根据给定的实部和虚部创建复数，而内置的"),s("code",[t._v("real")]),t._v("函数和"),s("code",[t._v("imag")]),t._v("函数则分别提取复数的实部和虚部")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" c1 "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("complex64")]),t._v("\nc1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2i")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" c2 "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("complex128")]),t._v("\nc2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3i")]),t._v("\nfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("复数有实部和虚部，complex64的实部和虚部为32位，complex128的实部和虚部为64位。")]),t._v(" "),s("h1",{attrs:{id:"布尔类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#布尔类型"}},[t._v("#")]),t._v(" 布尔类型")]),t._v(" "),s("p",[t._v("Go语言中以"),s("code",[t._v("bool")]),t._v("类型进行声明布尔型数据，布尔型数据只有"),s("code",[t._v("true（真）")]),t._v("和"),s("code",[t._v("false（假）")]),t._v("两个值。")]),t._v(" "),s("ol",[s("li",[t._v("布尔类型也叫 bool 类型，bool 类型数据只允许取值 true 和 false")]),t._v(" "),s("li",[t._v("bool 类型占 1 个字节")]),t._v(" "),s("li",[t._v("bool 类型适于 逻辑运算，一般用于程序流程控制[注：这个后面会详细介绍")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200728102337886.png",alt:"image-20200728102337886"}})]),t._v(" "),s("h2",{attrs:{id:"布尔类型注意事项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#布尔类型注意事项"}},[t._v("#")]),t._v(" 布尔类型注意事项")]),t._v(" "),s("ol",[s("li",[t._v("布尔类型变量的默认值为"),s("code",[t._v("false")]),t._v("。")]),t._v(" "),s("li",[t._v("Go 语言中不允许将整型强制转换为布尔型.")]),t._v(" "),s("li",[t._v("布尔型无法参与数值运算，也无法与其他类型进行转换。")])]),t._v(" "),s("h1",{attrs:{id:"字符串类型-string-类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串类型-string-类型"}},[t._v("#")]),t._v(" 字符串类型（ string 类型）")]),t._v(" "),s("p",[t._v("Go语言中的字符串以原生数据类型出现，使用字符串就像使用其他原生数据类型（int、bool、float32、float64 等）一样。 Go 语言里的字符串的内部实现使用"),s("code",[t._v("UTF-8")]),t._v("编码。 字符串的值为"),s("code",[t._v('双引号(")')]),t._v("中的内容，可以在Go语言的源码中直接添加非ASCII码字符")]),t._v(" "),s("ol",[s("li",[t._v("字符串就是一串固定长度的字符连接起来的字符序列。Go 的字符串是由单个字节连接起来的")]),t._v(" "),s("li",[t._v("Go语言的字符串的字节使用 UTF-8 编码标识 Unicode 文本")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200728102718469.png",alt:"image-20200728102718469"}})]),t._v(" "),s("h2",{attrs:{id:"字符串string使用注意事项和细节"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串string使用注意事项和细节"}},[t._v("#")]),t._v(" 字符串string使用注意事项和细节")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("Go 语言的字符串的字节使用 UTF-8 编码标识 Unicode 文本，这样 Golang 统一使用 UTF-8 编码,中文乱码问题不会再困扰程序员")])]),t._v(" "),s("li",[s("p",[t._v("字符串一旦赋值了，字符串就不能修改了：在 Go 中字符串是不可变的")])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200728195035767.png",alt:"image-20200728195035767"}})]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[s("p",[t._v("字符串的两种表示形式")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("双引号, 会识别转义字符")])]),t._v(" "),s("li",[s("p",[t._v("反引号，以字符串的原生形式输出，包括换行和特殊字符，可以实现防止攻击、输出源代码等效果")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200728195102754.png",alt:"image-20200728195102754"}})])])])]),t._v(" "),s("li",[s("p",[t._v("字符串拼接方式")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200728195119224.png",alt:"image-20200728195119224"}})])]),t._v(" "),s("li",[s("p",[t._v("当一行字符串太长时，需要使用到多行字符串，可以如下处理")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200728195134720.png",alt:"image-20200728195134720"}})])])]),t._v(" "),s("h2",{attrs:{id:"字符串转义符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串转义符"}},[t._v("#")]),t._v(" 字符串转义符")]),t._v(" "),s("p",[t._v("Go 语言的字符串常见转义符包含回车、换行、单双引号、制表符等，如下表所示。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("转义符")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("含义")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("code",[t._v("\\r")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("回车符（返回行首）")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("code",[t._v("\\n")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("换行符（直接跳到下一行的同列位置）")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("code",[t._v("\\t")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("制表符")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("code",[t._v("\\'")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("单引号")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("code",[t._v('\\"')])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("双引号")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("code",[t._v("\\\\")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("反斜杠")])])])]),t._v(" "),s("p",[t._v("举个例子，我们要打印一个Windows平台下的一个文件路径：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    fmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"str := \\"c:\\\\Code\\\\lesson1\\\\go.exe\\""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"多选字符串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多选字符串"}},[t._v("#")]),t._v(" 多选字符串")]),t._v(" "),s("p",[t._v("Go语言中要定义一个多行字符串时，就必须使用"),s("code",[t._v("反引号")]),t._v("字符：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v("s1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("`第一行\n第二行\n第三行\n`")]),t._v("\nfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("反引号间换行将被作为字符串中的换行，但是所有的转义字符均无效，文本将会原样输出。")]),t._v(" "),s("h2",{attrs:{id:"字符串的常用操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串的常用操作"}},[t._v("#")]),t._v(" 字符串的常用操作")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("方法")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("介绍")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("len(str)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("求长度")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("+或fmt.Sprintf")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("拼接字符串")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("strings.Split")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("分割")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("strings.contains")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("判断是否包含")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("strings.HasPrefix,strings.HasSuffix")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("前缀/后缀判断")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("strings.Index(),strings.LastIndex()")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("子串出现的位置")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("strings.Join(a[]string, sep string)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("join操作")])])])]),t._v(" "),s("h3",{attrs:{id:"字符串长度len"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串长度len"}},[t._v("#")]),t._v(" 字符串长度len()")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" so "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello 你好GO"')]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" so1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello wwGO"')]),t._v("\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("so"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("so1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//结果：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("14")]),t._v("\n")])])]),s("p",[t._v("len求出来的是字符串的字节长度，并不是实际占位长度")]),t._v(" "),s("h3",{attrs:{id:"拼接字符串-或fmt-sprintf"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#拼接字符串-或fmt-sprintf"}},[t._v("#")]),t._v(" 拼接字符串 +或fmt.Sprintf")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" so "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello 你好GO"')]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" so1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello wwGO"')]),t._v("\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("so "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" so1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" so2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s%s"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" so"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" so1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("so2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" so3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" so "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" so1\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("so3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//结果：")]),t._v("\nhello 你好GOhello wwGO\nhello 你好GOhello wwGO\nhello 你好GOhello wwGO\n")])])]),s("p",[t._v("fmt.Sprintf更适合进行组合输出，正常字符串拼接使用+就够了")]),t._v(" "),s("h3",{attrs:{id:"字符串切割strings-split"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串切割strings-split"}},[t._v("#")]),t._v(" 字符串切割strings.Split")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"strings"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" so "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello 你好GO"')]),t._v("\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("strings"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Split")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("so"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ll"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//结果：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("he o 你好GO"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("切割出来的类型就变成了切片类型")]),t._v(" "),s("p",[t._v("剩下的我就不接着写下去的，有兴趣的可以百度看看写法，后续看实际")]),t._v(" "),s("h1",{attrs:{id:"byte和rune类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#byte和rune类型"}},[t._v("#")]),t._v(" byte和rune类型")]),t._v(" "),s("p",[t._v("组成每个字符串的元素叫做“字符”，可以通过遍历或者单个获取字符串元素获得字符。 字符用单引号（’）包裹起来，如：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'中'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'x'")]),t._v("\n")])])]),s("p",[t._v("Go 语言的字符有以下两种：")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("uint8")]),t._v("类型，或者叫 byte 型，代表了"),s("code",[t._v("ASCII码")]),t._v("的一个字符。")]),t._v(" "),s("li",[s("code",[t._v("rune")]),t._v("类型，代表一个 "),s("code",[t._v("UTF-8字符")]),t._v("。")])]),t._v(" "),s("p",[t._v("当需要处理中文、日文或者其他复合字符时，则需要用到"),s("code",[t._v("rune")]),t._v("类型。"),s("code",[t._v("rune")]),t._v("类型实际是一个"),s("code",[t._v("int32")]),t._v("。")]),t._v(" "),s("p",[t._v("Go 使用了特殊的 rune 类型来处理 Unicode，让基于 Unicode 的文本处理更为方便，也可以使用 byte 型进行默认字符串处理，性能和扩展性都有照顾。")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历字符串")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("traversalString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\ts "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello沙河"')]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//byte")]),t._v("\n\t\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%v(%c) "')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" r "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("range")]),t._v(" s "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//rune")]),t._v("\n\t\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%v(%c) "')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("104")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("h"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("101")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("108")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("108")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("111")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("230")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("æ"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("178")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("²"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("153")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("230")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("æ"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("178")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("²"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("179")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("³"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("104")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("h"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("101")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("108")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("108")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("111")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("27801")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("沙"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("27827")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("河"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n")])])]),s("p",[t._v("因为UTF8编码下一个中文汉字由3~4个字节组成，所以我们不能简单的按照字节去遍历一个包含中文的字符串，否则就会出现上面输出中第一行的结果。")]),t._v(" "),s("p",[t._v("字符串底层是一个byte数组，所以可以和"),s("code",[t._v("[]byte")]),t._v("类型相互转换。字符串是不能修改的 字符串是由byte字节组成，所以字符串的长度是byte字节的长度。 rune类型用来表示utf8字符，一个rune字符由一个或多个byte组成。")]),t._v(" "),s("h3",{attrs:{id:"修改字符串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修改字符串"}},[t._v("#")]),t._v(" 修改字符串")]),t._v(" "),s("p",[t._v("要修改字符串，需要先将其转换成"),s("code",[t._v("[]rune")]),t._v("或"),s("code",[t._v("[]byte")]),t._v("，完成后再转换为"),s("code",[t._v("string")]),t._v("。无论哪种转换，都会重新分配内存，并复制字节数组。")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("changeString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\ts1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"big"')]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 强制类型转换")]),t._v("\n\tbyteS1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("byte")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tbyteS1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'p'")]),t._v("\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("byteS1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\ts2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"白萝卜"')]),t._v("\n\truneS2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rune")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\truneS2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'红'")]),t._v("\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("runeS2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h1",{attrs:{id:"字符类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符类型"}},[t._v("#")]),t._v(" 字符类型")]),t._v(" "),s("ol",[s("li",[t._v("Golang 中没有专门的字符类型，如果要存储单个 字符(字母)，一般使用 byte 来保存。")]),t._v(" "),s("li",[t._v("字符串就是一串固定长度的字符连接起来的字符序列。Go 的字符串是由单个字节连接起来的。也就是说对于传统的字符串是由字符组成的，而 Go 的字符串不同，它是由 字节组成的")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200728094758236.png",alt:"image-20200728094758236"}})]),t._v(" "),s("ol",[s("li",[t._v("如果我们保存的字符在 ASCII 表的,比如[0-1, a-z,A-Z..]直接可以保存到 byte")]),t._v(" "),s("li",[t._v("如果我们保存的字符对应码值大于 255,这时我们可以考虑使用 int 类型保存")]),t._v(" "),s("li",[t._v("如果我们需要安装字符的方式输出，这时我们需要格式化输出，即 fmt.Printf(“%c”, c1)..")])]),t._v(" "),s("h2",{attrs:{id:"字符类型使用细节"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符类型使用细节"}},[t._v("#")]),t._v(" 字符类型使用细节")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("字符常量是用单引号(' ')括起来的单个字符。例如：var c1 byte = 'a' var c2 int = '中' var c3 byte = '9'")])]),t._v(" "),s("li",[s("p",[t._v("Go 中允许使用转义字符 '\\’来将其后的字符转变为特殊字符型常量。例如：var c3 char = ‘\\n’ //  '\\n'表示换行符")])]),t._v(" "),s("li",[s("p",[t._v("Go 语 言 的 字 符 使 用 UTF-8 编 码，英文字母-1 个字节 汉字-3 个字节")])]),t._v(" "),s("li",[s("p",[t._v("在 Go 中，字符的本质是一个整数，直接输出时，是该字符对应的 UTF-8 编码的码值")])]),t._v(" "),s("li",[s("p",[t._v("可以直接给某个变量赋一个数字，然后按格式化输出时%c，会输出该数字对应的 unicode 字符")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200728095108731.png",alt:"image-20200728095108731"}})])]),t._v(" "),s("li",[s("p",[t._v("字符类型是可以进行运算的，相当于一个整数，因为它都对应有 Unicode 码")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200728102212888.png",alt:"image-20200728102212888"}})])])]),t._v(" "),s("h2",{attrs:{id:"字符类型本质探讨"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符类型本质探讨"}},[t._v("#")]),t._v(" 字符类型本质探讨")]),t._v(" "),s("ol",[s("li",[t._v("字符型 存储到 计算机中，需要将字符对应的码值（整数）找出来\n"),s("ol",[s("li",[t._v("存储：字符---\x3e对应码值----\x3e二进制--\x3e存储")]),t._v(" "),s("li",[t._v("读取：二进制----\x3e 码值 ----\x3e 字符 --\x3e 读取")])])]),t._v(" "),s("li",[t._v("字符和码值的对应关系是通过字符编码表决定的(是规定好)")]),t._v(" "),s("li",[t._v("Go 语言的编码都统一成了 utf-8。非常的方便，很统一，再也没有编码乱码的困扰了")])]),t._v(" "),s("h1",{attrs:{id:"基本数据类型的默认值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型的默认值"}},[t._v("#")]),t._v(" 基本数据类型的默认值")]),t._v(" "),s("h2",{attrs:{id:"基本介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本介绍"}},[t._v("#")]),t._v(" 基本介绍")]),t._v(" "),s("p",[t._v("在 go 中，数据类型都有一个默认值，当程序员没有赋值时，就会保留默认值，在 go 中，默认值又叫零值")]),t._v(" "),s("h2",{attrs:{id:"基本数据类型的默认值如下"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型的默认值如下"}},[t._v("#")]),t._v(" 基本数据类型的默认值如下")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200728195344141.png",alt:"image-20200728195344141"}})]),t._v(" "),s("h2",{attrs:{id:"案例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#案例"}},[t._v("#")]),t._v(" 案例")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200728195400959.png",alt:"image-20200728195400959"}})]),t._v(" "),s("h1",{attrs:{id:"基本数据类型的相互转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型的相互转换"}},[t._v("#")]),t._v(" 基本数据类型的相互转换")]),t._v(" "),s("h2",{attrs:{id:"基本介绍-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本介绍-2"}},[t._v("#")]),t._v(" 基本介绍")]),t._v(" "),s("p",[t._v("Golang 和 java / c 不同，Go 在不同类型的变量之间赋值时 需要显式转换。也就是说 Golang 中数据类型 不能自动转换")]),t._v(" "),s("h2",{attrs:{id:"基本语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本语法"}},[t._v("#")]),t._v(" 基本语法")]),t._v(" "),s("p",[t._v("表达式 T(v) 将值 v 转换为类型 T")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("T")]),t._v(": 就是数据类型，比如 int32，int64，float32 等等")]),t._v(" "),s("li",[s("strong",[t._v("v")]),t._v(": 就是需要转换的变量")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200728195500626.png",alt:"image-20200728195500626"}})]),t._v(" "),s("h2",{attrs:{id:"基本数据类型相互转换的注意事项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型相互转换的注意事项"}},[t._v("#")]),t._v(" 基本数据类型相互转换的注意事项")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("Go 中，数据类型的转换可以是从 表示范围小--\x3e表示范围大，也可以 范围大---\x3e范围小")])]),t._v(" "),s("li",[s("p",[t._v("被转换的是变量存储的数据(即值)，变量本身的数据类型并没有变化！")])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200728195630681.png",alt:"image-20200728195630681"}})]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[t._v("在转换中，比如将 int64 转成 int8 【-128---127】 ，编译时不会报错，只是转换的结果是 按溢出处理，和我们希望的结果不一样。 因此在转换时，需要考虑范围")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200728195649399.png",alt:"image-20200728195649399"}})]),t._v(" "),s("h2",{attrs:{id:"实例-是否能编译成功"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实例-是否能编译成功"}},[t._v("#")]),t._v(" 实例 - 是否能编译成功")]),t._v(" "),s("h3",{attrs:{id:"实例1"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实例1"}},[t._v("#")]),t._v(" 实例1")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200728195710551.png",alt:"image-20200728195710551"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200728195719000.png",alt:"image-20200728195719000"}})]),t._v(" "),s("h2",{attrs:{id:"实例2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实例2"}},[t._v("#")]),t._v(" 实例2")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200728195749719.png",alt:"image-20200728195749719"}})]),t._v(" "),s("h1",{attrs:{id:"基本数据类型和-string-的转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型和-string-的转换"}},[t._v("#")]),t._v(" 基本数据类型和 string 的转换")]),t._v(" "),s("h2",{attrs:{id:"基本介绍-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本介绍-3"}},[t._v("#")]),t._v(" 基本介绍")]),t._v(" "),s("p",[t._v("在程序开发中，我们经常将基本数据类型转成 string,或者将 string 转成基本数据类型")]),t._v(" "),s("h2",{attrs:{id:"基本类型转-string-类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本类型转-string-类型"}},[t._v("#")]),t._v(" 基本类型转 string 类型")]),t._v(" "),s("h2",{attrs:{id:"方式1"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方式1"}},[t._v("#")]),t._v(" 方式1")]),t._v(" "),s("p",[t._v('格式：fmt.Sprintf("%参数", 表达式)')]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200730194318521.png",alt:"image-20200730194318521"}})]),t._v(" "),s("ol",[s("li",[t._v("参数需要和表达式的数据类型相匹配")]),t._v(" "),s("li",[t._v("fmt.Sprintf().. 会返回转换后的字符串")])]),t._v(" "),s("h3",{attrs:{id:"实例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实例"}},[t._v("#")]),t._v(" 实例")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200730194358767.png",alt:"image-20200730194358767"}})]),t._v(" "),s("h2",{attrs:{id:"方式2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方式2"}},[t._v("#")]),t._v(" 方式2")]),t._v(" "),s("p",[t._v("格式：使用 strconv 包的函数")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200730194420930.png",alt:"image-20200730194420930"}})]),t._v(" "),s("h3",{attrs:{id:"实例-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实例-2"}},[t._v("#")]),t._v(" 实例")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200730194500741.png",alt:"image-20200730194500741"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200730194504707.png",alt:"image-20200730194504707"}})]),t._v(" "),s("h1",{attrs:{id:"string-类型转基本数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string-类型转基本数据类型"}},[t._v("#")]),t._v(" string 类型转基本数据类型")]),t._v(" "),s("h2",{attrs:{id:"基本介绍-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本介绍-4"}},[t._v("#")]),t._v(" 基本介绍")]),t._v(" "),s("p",[t._v("使用时 strconv 包的函数")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200730194606610.png",alt:"image-20200730194606610"}})]),t._v(" "),s("h2",{attrs:{id:"实例-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实例-3"}},[t._v("#")]),t._v(" 实例")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200730194616065.png",alt:"image-20200730194616065"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200730194629418.png",alt:"image-20200730194629418"}})]),t._v(" "),s("p",[t._v("##　string 转基本数据类型的注意事项")]),t._v(" "),s("ol",[s("li",[t._v("在将 String 类型转成 基本数据类型时， 要确保 String 类型能够转成有效的数据")]),t._v(" "),s("li",[t._v('比如：我们可以把 "123" , 转成一个整数，但是不能把 "hello" 转成一个整数，如果这样做，Golang 直接将其转成 0')]),t._v(" "),s("li",[t._v("其它类型也是一样的道理. float => 0 bool => false")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200730194737813.png",alt:"image-20200730194737813"}})])])}),[],!1,null,null,null);a.default=e.exports}}]);