(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{411:function(o,n,e){"use strict";e.r(n);var t=e(45),i=Object(t.a)({},(function(){var o=this,n=o.$createElement,e=o._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":o.$parent.slotKey}},[e("h1",{attrs:{id:"库大全"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#库大全"}},[o._v("#")]),o._v(" 库大全")]),o._v(" "),e("p",[e("strong",[o._v("golang用于创建和发送电子邮件的库")])]),o._v(" "),e("p",[o._v("douceur - HTML 邮件中的内联 CSS\nemail - 一个健壮的、灵活的 email 库\nGo-dkim - DKIM 库，用于对 email 进行签名和验证\nGo-imap - IMAP 库，用于客户端和服务器\nGo-message - 用于触雷互联网消息格式和邮件的库\nGomail - Gomail 是一个非常简单且强大的库，用于发送电子邮件\nHectane - 轻量级 SMTP 客户端，提供 HTTP API\nhermes - 一个用于生成干净、响应式 HTML e-mail 的包\nMailHog - Email 及 SMTP 测试工具，具有 web 及 API 接口\nSendGrid - SendGrid 的 Go 语言库，用于发送电子邮件\nsmtp - SMTP 服务器协议状态机")]),o._v(" "),e("p",[e("strong",[o._v("golang处理日期和时间的库")])]),o._v(" "),e("p",[o._v("carbon - 简单的时间扩展程序，有很多有用的方法，是 PHP Carbon 库的接口\ndurafmt - 持续时间格式化\nfeiertage - 一组计算德国公共假期的函数，比如复活节、感恩节等\nGo-persian-calendar - 太阳历\nGoweek - 处理星期的库\nnow - Now 是一个 Go 语言的时间工具集\nNullTime -时间可以是 NULL 的库\ntimeutil - 为 Go 语言时间包扩展了有用的功能，例如时间间隔和格式化")]),o._v(" "),e("p",[e("strong",[o._v("数据库迁移")])]),o._v(" "),e("p",[o._v("darwin - 数据库模式进化库\nGo-fixtures - 类似 DjanGo fixtures，用于 Golang 的內建数据库/sql 库\nGoose - 数据库迁移工具。你可以通过编写增量 SQL 或 Go 语言脚本来管理你的数据库\nGormigrate - 数据库模式迁移帮助工具，用于 Gorm ORM.\nmigrate - 数据库迁移。命令行及 Go 语言库\npravasan - 简单的迁移，目前支持 MySQL 但是近期打算支持 Postgres, SQLite, MonGoDB 等等\nsoda - 数据库迁移、创建、 ORM等等，用于 MySQL, PostgreSQL, 以及 SQLite.\nsql-migrate - 数据库迁移工具，允许利用 Go-bindata 将数据库迁移嵌入应用程序")]),o._v(" "),e("p",[e("strong",[o._v("Go 语言实现的数据库")])]),o._v(" "),e("p",[o._v("BigCache - 为 gigabytes 量级数据设计的高效键/值缓存\nbolt - 底层键值数据库\nbuntdb - 快速，可嵌入的，内存键值数据库，可定义索引及 spatial\ncache2Go - 基于内存存储的键值缓存，支持自动基于超时的自动失效\ncockroach - 可扩展的、一致的事务型数据库\ncouchcache - RESTful 缓存微服务，基于Couchbase\ndgraph - 可扩展的、分布式的、低延时、高吞吐的图数据库\ndiskv - 具有 disk-backed 功能的持久化键值存储\neliasdb - 无依赖、事物型图数据库，支持 REST API、短语搜索以及类 SQL 的查询语言\nforestdb - ForestDB 的 Go 语言借口\nGCache - 支持缓存过期、 LFU、 LRU 和 ARC 的缓存库\ngeocache - 基于内存存储的缓存，适用于分布式部署的应用\nGo-cache - 内存键值存储/缓存库，适用于单机程序\nGoleveldb - 使用 Go 语言实现的 LevelDB\ngroupcache - Groupcache 是一个缓存及缓存填充库，在很多情况下用于替代 memcached.\ninfluxdb - 用于计量、事件及实时分析的、可扩展的数据库\nledisdb - Ledisdb 是一个高性能 NoSQL 数据库，类似 Redi\nleviGo - LeviGo 是 LevelDB的 Go 语言封装\nmoss - Moss 是一个简单的 LSM 键值存储引擎，100% Go 语言实现\npiladb - 轻量级 RESTful 数据库引擎，基于堆栈结构\nprometheus - 监控系统及时间序列数据库\nrqlite - 基于 SQLite 的轻量级的、分布式的关系型数据库\nScribble - 小巧的 JSON 文件存储\ntempdb - 临时数据的键值对存储\ntidb - TiDB 是一个分布式的 SQL 数据库。受到了 Google F1的启发\ntiedot - 基于 Go 语言的 NoSQL 数据库\nTile38 - 地理位置数据库及实时地理围栏")]),o._v(" "),e("p",[e("strong",[o._v("golang通用数据结构及算法")])]),o._v(" "),e("p",[o._v("binpacker - 二进制数据封包拆包工具，帮你构建自定义的二进制数据流\nbit - Go 语言集合数据结构。提供了额外的位操作功能\nbitset - 实现了 bitset 的 Go 语言包.\nbloom - Go 语言实现的布隆过滤器（bloom filter）\nbloom - Go 语言实现的布隆过滤器\nboomfilters - 概率统计数据结构，用于处理大量连续的数据。\ncount-min-log - Go 语言实现的 Count-Min-Log sketch 算法(类似 Count-Min sketch 算法，但是使用的内存更少).\ncuckoofilter - Cuckoo 过滤器：一个用go语言实现的计数布隆过滤器的替代品\nencoding - 整型压缩库\nGo-adaptive-radix-tree - Go 语言实现的自适应基数树\nGo-datastructures - 一组有用的、高性能的、线程安全的数据结构\nGo-geoindex - 基于内存存储的地理索引\nGo-rquad - 区域四叉树，支持有效点位置和领域发现\nGods - Go 语言数据结构、容器、集合、列表、栈、键值对、 BidiMaps、树、HashSet 等\nGolang-set - 线程安全和非线程安全的高性能集合\nGoskiplist - Go 语言实现的跳跃表\nGota - 为go语言实现了数据帧，序列以及数据噪音的方法\nhilbert - 用于映射空间填充曲线（例如希尔伯特曲线和皮亚诺曲线）和数值的库。\nhyperloglog - HyperLogLog implementation with Sparse, LogLog-Beta bias correction and TailCut space reduction.\nlevenshtein - 编辑距离（levenshtein distance）和相似性度量， 可以自定义编辑代价和and Winkler-like bonus for common prefix.\nlevenshtein - Go 语言实现计算编辑距离\nmafsa - Go 语言实现的 MA-FSA ，包含最小完美哈希\nmerkletree - 实现了梅克尔树，提供了一种高效、安全的数据结构内容验证方法\nroaring - 实现了压缩 bitsets 的Go语言库\nskiplist - Go语言实现的跳跃表\ntrie - Go语言实现的Trie树\nttlcache - In-memory LRU string-interface{} map with expiration for Golang\nwillf/bloom - 实现了布隆过滤器的库")]),o._v(" "),e("p",[e("strong",[o._v("golang用于进行配置解析的库")])]),o._v(" "),e("p",[o._v("config - JSON 或 YAML 配置的封装，支持环境变量和标记解析\nconfigure - 可以通过多种途径进行配置，包括 JSON, 标记位以及环境变量\nenv - 解析环境变量为 Go 语言结构体\nenvcfg - 解析环境变量为 Go 语言结构体\nenvconf - 通过环境变量来配置\nenvconfig - 通过环境变量读取配置\ngcfg - 读取类 INI 类型的配置文件为 Go 语言结构体，支持自定义变量和节\nGoConfig - 通过命令行的输入、环境变量、配置文件来初始化一个结构体兵将一个结构体解析为输入\nGodotenv - Ruby 库 dotenv 的 Go 语言接口 (通过 .env 来获取环境变量)\nGofigure - 让 Go 语言应用程序配置变得简单\nGone/jconf - 模块化 JSON 配置工具。允许你将配置参数结构体和使用它的代码放在一起，而不需要让主配置文件了解所有子模块的细节来进行序列化\nhjson - 人性化的 JSON，一个便于程序员使用和阅读的配置文件格式。更加轻松的语法，更少的错误和更多的注释\ninGo - 将配置标记持久化到一个类似 ini 的文件中\nini - 用于读写INI 文件的库\njoshbetz/config - 消息配置库，可以解析环境变量、JSON 文件并根据SIGHUP自动重新载入\nmini -用于解析类 ini 文件的库\nstore - 轻量级配置管理\nviper - 这个库名叫毒蛇 ,Go 语言配置工具\nxdg -遵守 XDG 标准 的配置工具")]),o._v(" "),e("p",[e("strong",[o._v("golang认证和授权库")])]),o._v(" "),e("p",[o._v("authboss - 用于 web 开发的组件化认证授权系统。它尝试尽可能的移除模板代码以及硬编码，这使你每次新建 web 项目的时候，可以做到即插即用、配置并开始开发你的 web 英语，而不必每次都重新创建一个认证授权系统。\ncasbin - 一个支持接入控制模型（例如:ACL,RBAC,ABAC）的授权库\nGo-AWS-Auth - AWS 请求签名库\nGo-jose - Fairly complete implementation of the JOSE working group's JSON Web Token, JSON Web 签名以及JSON Web 加密 specs.\nGo-oauth2-server - 使用 Go 语言编写的独立、符合标准的 OAuth2 服务器\nGo.auth - 为 Go 语言 web 应用提供的授权 API.\nGologin - 可以串连使用OAuth1 和 OAuth2 认证服务\nGorbac - 一个用 Go 语言实现的轻量级RBAC\nGoth - 提供了一种简洁的、惯用的方式来使用OAuth 和 OAuth2.\nhttpauth - HTTP 认证中间件\njwt - 简单易用的一个JSON Web Tokens (JWT)的实现\njwt-auth - JWT 为 Go 语言 HTTP 服务器编写的 jwt 中间件，有多种配置选项\njwt-Go - Go 语言实现的JSON Web Tokens (JWT).\nloginsrv - JWT 登录微服务，可以继承OAuth2 (Github), htpasswd, osiam等后端。\noauth2 - Goauth2的继承者。 通用 OAuth 2.0 库，集成了对JWT, Google APIs, Compute Engine 和 App Engine的支持.\nosin - Go 语言 OAuth2 服务器库\npermissions2 - 用于追踪用户，登录状态和许可的库。使用安全 cookies 和 bcrypt.\nsession - Go 语言会话管理(支持 Google App Engine - GAE)\nsessions - 为 Go 语言 HTTP 服务器开发的非常简单的、高性能的、高可定制的会话服务\ntraefik - 反向代理和负载均衡库，支持多种后端\nyubiGo - Yubikey 客户端，提供了用于在 Go 语言应用中集成Yubico Yubikey 的 API")]),o._v(" "),e("p",[e("strong",[o._v("golang用于操作音频的库")])]),o._v(" "),e("p",[o._v('flac - 原生 Go FLAC 解码器\nflac - 原生 Go FLAC 解码器\ngaad - 原生 Go AAC 比特流解析器\nGo-sox - libsox 的 Go 语言接口\nGo_mediainfo - libmediainfo 的 Go 语言接口\nGosamplerate - libsamplerate 的 Go 语言接口\nid3v2 - 快速且稳定的 ID3 解析及写入库\nmix - 基于序列的 Go 语言混音器，可用于音乐 app。\nmp3 - 原生 Go MP3 解码器\nmusic-theory - Go 语言编写的音乐理论模型\nPortAudio - 音频 I/O 库的 Go 语言接口\nportmidi - PortMidi 的 Go 语言接口\ntaglib - taglib 的 Go 语言接口\nvorbis - "原生" Go Vorbis 解码器 (使用 CGo, 但是没有其他依赖).\nwaveform - 一个可以通过音频流生成波形图像的包')]),o._v(" "),e("p",[e("strong",[o._v("golang代码中嵌入其他语言的包")])]),o._v(" "),e("p",[o._v("aGora - 一种动态类型的可以嵌入 Go 中的编程语言\nanko - Go 语言编写的解释器\nbinder - Lua 接口, 基于 Gopher-lua\ngisp - Simple LISP\nGo-duktape - Duktape JavaScript 引擎的 Go 语言接口\nGo-lua - Lua 5.2 虚拟机的纯 Go 语言接口\nGo-php - PHP 的 Go 语言接口\nGo-python - CPython C-API 的 Go 语言接口\nGolua - Lua C API。的 Go 语言接口\nGopher-lua - Go 语言编写的 Lua 5.1 虚拟机和编译器\nngaro - 可嵌入的 Ngaro 虚拟机实现，支持在 Retro 中使用脚步\notto - Go 编写的 Javascrip 解释器\npurl - 嵌入 Go 语言的 Perl 5.18.2")]),o._v(" "),e("p",[e("strong",[o._v("go日志库")])]),o._v(" "),e("p",[o._v("glg - glg 是一个简单、快速、分级的日志库\nglog - 分级记录日志的库\nGo-cronowriter 对日志文件进行自动循环写入的库基于当前日期和时间，类似 cronolog.\nGo-log - 支持多处理器及日志分级的库\nGo-log - Go 语言实现的 Log4j\nGo-logger - 支持日志分级的简单的日志工具\nGologger - 简单易用的日志库，可以在彩色控制台、简易控制的、文件或 Elasticsearch 中记录\nGomol - 支持多种输出，结构化的日志模块，可以扩展它的输出\nGone/log - 快速、可扩展、全功能、兼容标准库的日志库\nlog - 结构化日志库\nlog - 简单、可配置、可扩展的结构化日志库\nlog-voyage - 全功能日志saas 使用 Go 语言编写\nlog15 - 简单强大的日志库\nlogdump - 支持分级的日志库\nlogex - Go 语言日志库，支持追踪和分级，基于标准库进行了封装\nlogger - 一个极简的日志库\nlogrus - 支持结构化的日志工具.\nlogrusly - logrus 的插件，用于将错误发送到 Loggly.\nlogutils - 对 Go 语言标准日志工具进行了扩展，使其更好用\nlogxi - 十二要素 app 日志工具，非常快速，令你开心\nlumberjack - 简单的循环日志工具，实现了 io.WriteCloser.\nmlog - 一个简单的日志模块，可以分5级并有一个可选的循环日志文件记录功能，支持 stdout/stderr 输出.\nozzo-log - 高性能日志库，支持日志严重级别、分类及过滤。可以将过滤后的信息发送到不同的目的地(例如： 控制台、网络、邮箱).\nseelog - 一个灵活的、解耦的、格式化的日志库\nslf - 简单日志门面（The Structured Logging Facade (SLF) ） (类似 SLF4J，但是它是结构化的，并且专为 Go 语言设计)\nslog - 为 Go 语言实现的结构化日志门面（Structured Logging Facade (SLF) ）\nspew - 为 Go 语言的数据结构实现了一个整洁的打印功能，有助于调试\nstdlog - Stdlog 是一个面向对象的库，提供了分级日志功能，对于定时任务很有用.\ntail - 这个 Go 语言软件包力争模拟 BSD tail 的功能\nxlog - 插件架构以及灵活的日志系统，具有日志等级控制，多日志目标以及自定义日志格式功能\nxlog - 结构化日志 for net/context aware HTTP handlers ，可以灵活的分发\nzap - 快速的、结构化的、分级的日志库\nzerolog - 零分配 JSON 日志.")]),o._v(" "),e("p",[e("strong",[o._v("golang操作表单的库")])]),o._v(" "),e("p",[o._v("bind - 将表单数据绑定到任意的 Go 变量上\nbinding - 将来自 net/HTTP 请求的表单、JSON 数据绑定到结构体\nconform - 检查用户输入并基于结构标签来清理数据\nform - 解码 url 中的数据到 Go 语言变量中以及将 Go 语言变量编码进 url 支持Dual Array 及 Full map\nformam - 将表单数据解码到结构体\nforms - 框架无关的表单/JSON数据解析验证库，支持多部分表单及文件\nGorilla/csrf - 为 Go 语言 web 应用提供 CSRF 防御\nnosurf - CSRF 防御中间件")]),o._v(" "),e("p",[e("strong",[o._v("Go实现消息系统的库")])]),o._v(" "),e("p",[o._v("CentrifuGo - 实时消息服务器\ndbus - D-Bus的 Go 语言接口\ndrone-line - 通过软件包，docker 或是 Drone CI来发送 Line 通知\nemitter - 通过Go语言的方式发送事件消息，可以使用通配符，断言，取消发送等优秀特性\nEventBus - 轻量级事件库，支持异步\ngaurun-client - Go 语言编写的 Gaurun 客户端\nGlue - 健壮的 Go 和 Javascript Socket 库 (可以用来替代 "),e("a",{attrs:{href:"http://socket.io/",target:"_blank",rel:"noopener noreferrer"}},[o._v("Socket.io"),e("OutboundLink")],1),o._v(").\nGo-longpoll - 支持长轮询的发布与订阅\nGo-notify - 原生实现的桌面通知规范\nGo-nsq - NSQ 官方 Go 语言库\nGo-"),e("a",{attrs:{href:"http://socket.io/",target:"_blank",rel:"noopener noreferrer"}},[o._v("socket.io"),e("OutboundLink")],1),o._v(" - Go 语言的 "),e("a",{attrs:{href:"http://socket.io/",target:"_blank",rel:"noopener noreferrer"}},[o._v("socket.io"),e("OutboundLink")],1),o._v('库 ,一个实时应用框架.\nGo-vitotrol - Viessmann Vitotrol 服务的 Go 语言客户端\nGollum - 一个 n:m 的多路复用器，从不同的源汇聚消息并向目标进行广播\nGolongpoll - HTTP 长轮询服务器库，让 web 发布与订阅变的更简单.\nGoose - Go 语言实现的服务器端事件发送\nGopush-cluster - Gopush-cluster 是一个 Go 语言实现的支持集群的comet服务（支持 websocket，和tcp协议）\nGorush - 通知推送服务器，使用 APNs2 和 Google GCM.\nguble - 一个使用通知推送(Google Firebase Cloud Messaging, Apple Push Notification services, SMS)、websockets 、REST API 的消息服务器。提供了分布式操作和消息持久化特性\nmachinery - 异步任务队列，基于分布式消息处理\nmanGos - 纯 Go 语言实现的 Nanomsg ("Scalable Protocols")\nmelody - 用于处理 websocket 会话的一个极简框架，包括广播和自动 ping/pong 处理\nNATS Go Client - 轻量级高性能发布订阅(publish-subscribe) 以及分布式消息队列系统，这个一个Go语言库.\nnsq-event-bus - 针对 NSQ 的主题和频道进行了简单的封装\noplog - 原生的 oplog/replication 系统，用于 REST APIs\npubsub - 一个简单的 pubsub 软件包\nRapidMQ - RapidMQ 是一个轻量级，可靠的本地消息队列管理库\nsarama - 用于 Apache Kafka 的库\nUniqush-Push - 基于 Redis 的统一推服务，用于服务器端向移动客户端推送消息\nzmq4 - ZeroMQ version 4的 GO 语言接口。也有适用于version 3 及 version 2的')])])}),[],!1,null,null,null);n.default=i.exports}}]);