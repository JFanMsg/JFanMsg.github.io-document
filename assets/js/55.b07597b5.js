(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{421:function(t,s,a){"use strict";a.r(s);var n=a(45),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"时间-定时器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#时间-定时器"}},[t._v("#")]),t._v(" 时间 - 定时器")]),t._v(" "),a("h1",{attrs:{id:"定时器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定时器"}},[t._v("#")]),t._v(" 定时器")]),t._v(" "),a("p",[t._v("定时器是进程规划自己在未来某一时刻接获通知的一种机制。本节介绍两种定时器："),a("code",[t._v("Timer")]),t._v("（到达指定时间触发且只触发一次）和 "),a("code",[t._v("Ticker")]),t._v("（间隔特定时间触发）。")]),t._v(" "),a("h2",{attrs:{id:"timer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#timer"}},[t._v("#")]),t._v(" Timer")]),t._v(" "),a("h3",{attrs:{id:"内部实现源码分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内部实现源码分析"}},[t._v("#")]),t._v(" 内部实现源码分析")]),t._v(" "),a("p",[a("code",[t._v("Timer")]),t._v(" 类型代表单次时间事件。当 "),a("code",[t._v("Timer")]),t._v(" 到期时，当时的时间会被发送给 C (channel)，除非 "),a("code",[t._v("Timer")]),t._v(" 是被 "),a("code",[t._v("AfterFunc")]),t._v(" 函数创建的。")]),t._v(" "),a("p",[t._v("注意："),a("code",[t._v("Timer")]),t._v(" 的实例必须通过 "),a("code",[t._v("NewTimer")]),t._v(" 或 "),a("code",[t._v("AfterFunc")]),t._v(" 获得。")]),t._v(" "),a("p",[t._v("类型定义如下：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Timer "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    C "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("chan")]),t._v(" Time     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The channel on which the time is delivered.")]),t._v("\n    r runtimeTimer\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("C 已经解释了，我们看看 "),a("code",[t._v("runtimeTimer")]),t._v("。它定义在 sleep.go 文件中，必须和 "),a("code",[t._v("runtime")]),t._v(" 包中 "),a("code",[t._v("time.go")]),t._v(" 文件中的 "),a("code",[t._v("timer")]),t._v(" 必须保持一致：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" timer "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    i "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// heap index")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Timer wakes up at when, and then at when+period, ... (period > 0 only)")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// each time calling f(now, arg) in the timer goroutine, so f must be")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a well-behaved function and not block.")]),t._v("\n    when   "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v("\n    period "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v("\n    f      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uintptr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    arg    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    seq    "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uintptr")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("我们通过 "),a("code",[t._v("NewTimer()")]),t._v(" 来看这些字段都怎么赋值，是什么用途。")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NewTimer creates a new Timer that will send")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the current time on its channel after at least duration d.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NewTimer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d Duration"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("Timer "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("chan")]),t._v(" Time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    t "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("Timer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        C"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" runtimeTimer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            when"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("when")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("    sendTime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("  c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("startTimer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" t\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("在 "),a("code",[t._v("when")]),t._v(" 表示的时间到时，会往 Timer.C 中发送当前时间。"),a("code",[t._v("when")]),t._v(" 表示的时间是纳秒时间，正常通过 "),a("code",[t._v("runtimeNano() + int64(d)")]),t._v(" 赋值。跟上一节中讲到的 "),a("code",[t._v("now()")]),t._v(" 类似，"),a("code",[t._v("runtimeNano()")]),t._v(" 也在 "),a("code",[t._v("runtime")]),t._v(" 中实现（"),a("code",[t._v("runtime · nanotime")]),t._v("）：")]),t._v(" "),a("ul",[a("li",[t._v("调用系统调用 "),a("code",[t._v("clock_gettime")]),t._v(" 获取时钟值（这是 POSIX 时钟）。其中 clockid_t 时钟类型是 CLOCK_MONOTONIC，也就是不可设定的恒定态时钟。具体的是什么时间，SUSv3 规定始于未予规范的过去某一点，Linux 上，始于系统启动。")]),t._v(" "),a("li",[t._v("如果 "),a("code",[t._v("clock_gettime")]),t._v(" 不存在，则使用精度差些的系统调用 "),a("code",[t._v("gettimeofday")]),t._v("。")])]),t._v(" "),a("p",[a("code",[t._v("f")]),t._v(" 参数的值是 "),a("code",[t._v("sendTime")]),t._v("，定时器时间到时，会调用 f，并将 "),a("code",[t._v("arg")]),t._v(" 和 "),a("code",[t._v("seq")]),t._v(" 传给 "),a("code",[t._v("f")]),t._v("。")]),t._v(" "),a("p",[t._v("因为 "),a("code",[t._v("Timer")]),t._v(" 是一次性的，所以 "),a("code",[t._v("period")]),t._v(" 保留默认值 0。")]),t._v(" "),a("p",[t._v("定时器的具体实现逻辑，都在 "),a("code",[t._v("runtime")]),t._v(" 中的 "),a("code",[t._v("time.go")]),t._v(" 中，它的实现，没有采用经典 Unix 间隔定时器 "),a("code",[t._v("setitimer")]),t._v(" 系统调用，也没有 采用 POSIX 间隔式定时器（相关系统调用："),a("code",[t._v("timer_create")]),t._v("、"),a("code",[t._v("timer_settime")]),t._v(" 和 "),a("code",[t._v("timer_delete")]),t._v("），而是通过四叉树堆 (heep) 实现的（"),a("code",[t._v("runtimeTimer")]),t._v(" 结构中的 "),a("code",[t._v("i")]),t._v(" 字段，表示在堆中的索引）。通过构建一个最小堆，保证最快拿到到期了的定时器执行。定时器的执行，在专门的 "),a("code",[t._v("goroutine")]),t._v(" 中进行的："),a("code",[t._v("go timerproc()")]),t._v("。有兴趣的同学，可以阅读 "),a("code",[t._v("runtime/time.go")]),t._v(" 的源码。")]),t._v(" "),a("h3",{attrs:{id:"timer-相关函数或方法的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#timer-相关函数或方法的使用"}},[t._v("#")]),t._v(" Timer 相关函数或方法的使用")]),t._v(" "),a("p",[a("strong",[t._v("通过 "),a("code",[t._v("time.After")]),t._v(" 模拟超时：")])]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("chan")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("go")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// time.Sleep(1 * time.Second)")]),t._v("\n    time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sleep")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Second"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v("c\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"channel..."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v("time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("After")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Second"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"timeout..."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("strong",[a("code",[t._v("time.Stop")]),t._v(" 停止定时器 或 "),a("code",[t._v("time.Reset")]),t._v(" 重置定时器")])]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("start "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ntimer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("AfterFunc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Second"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"after func callback, elaspe:"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sub")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\ntime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sleep")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Second"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// time.Sleep(3*time.Second)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Reset 在 Timer 还未触发时返回 true；触发了或 Stop 了，返回 false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" timer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Reset")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Second"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"timer has not trigger!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"timer had expired or stop!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\ntime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sleep")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Second"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// output:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// timer has not trigger!")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// after func callback, elaspe: 4.00026461s")]),t._v("\n")])])]),a("p",[t._v("如果定时器还未触发，"),a("code",[t._v("Stop")]),t._v(" 会将其移除，并返回 true；否则返回 false；后续再对该 "),a("code",[t._v("Timer")]),t._v(" 调用 "),a("code",[t._v("Stop")]),t._v("，直接返回 false。")]),t._v(" "),a("p",[a("code",[t._v("Reset")]),t._v(" 会先调用 "),a("code",[t._v("stopTimer")]),t._v(" 再调用 "),a("code",[t._v("startTimer")]),t._v("，类似于废弃之前的定时器，重新启动一个定时器。返回值和 "),a("code",[t._v("Stop")]),t._v(" 一样。")]),t._v(" "),a("h3",{attrs:{id:"sleep-的内部实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sleep-的内部实现"}},[t._v("#")]),t._v(" Sleep 的内部实现")]),t._v(" "),a("p",[t._v("查看 "),a("code",[t._v("runtime/time.go")]),t._v(" 文件中的 "),a("code",[t._v("timeSleep")]),t._v(" 可知，"),a("code",[t._v("Sleep")]),t._v(" 的是通过 "),a("code",[t._v("Timer")]),t._v(" 实现的，把当前 goroutine 作为 "),a("code",[t._v("arg")]),t._v(" 参数（"),a("code",[t._v("getg()")]),t._v(")。")]),t._v(" "),a("h2",{attrs:{id:"ticker-相关函数或方法的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ticker-相关函数或方法的使用"}},[t._v("#")]),t._v(" Ticker 相关函数或方法的使用")]),t._v(" "),a("p",[a("code",[t._v("Ticker")]),t._v(" 和 "),a("code",[t._v("Timer")]),t._v(" 类似，区别是："),a("code",[t._v("Ticker")]),t._v(" 中的 "),a("code",[t._v("runtimeTimer")]),t._v(" 字段的 "),a("code",[t._v("period")]),t._v(" 字段会赋值为 "),a("code",[t._v("NewTicker(d Duration)")]),t._v(" 中的 "),a("code",[t._v("d")]),t._v("，表示每间隔 "),a("code",[t._v("d")]),t._v(" 纳秒，定时器就会触发一次。")]),t._v(" "),a("p",[t._v("除非程序终止前定时器一直需要触发，否则，不需要时应该调用 "),a("code",[t._v("Ticker.Stop")]),t._v(" 来释放相关资源。")]),t._v(" "),a("p",[t._v("如果程序终止前需要定时器一直触发，可以使用更简单方便的 "),a("code",[t._v("time.Tick")]),t._v(" 函数，因为 "),a("code",[t._v("Ticker")]),t._v(" 实例隐藏起来了，因此，该函数启动的定时器无法停止。")]),t._v(" "),a("h2",{attrs:{id:"定时器的实际应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定时器的实际应用"}},[t._v("#")]),t._v(" 定时器的实际应用")]),t._v(" "),a("p",[t._v("在实际开发中，定时器用的较多的会是 "),a("code",[t._v("Timer")]),t._v("，如模拟超时，而需要类似 "),a("code",[t._v("Tiker")]),t._v(" 的功能时，可以使用实现了 "),a("code",[t._v("cron spec")]),t._v(" 的库 "),a("a",{attrs:{href:"https://github.com/robfig/cron",target:"_blank",rel:"noopener noreferrer"}},[t._v("cron"),a("OutboundLink")],1),t._v("，感兴趣的可以参考文章："),a("a",{attrs:{href:"http://blog.studygolang.com/2014/02/go_crontab/",target:"_blank",rel:"noopener noreferrer"}},[t._v("《Go 语言版 crontab》"),a("OutboundLink")],1),t._v("。")])])}),[],!1,null,null,null);s.default=e.exports}}]);