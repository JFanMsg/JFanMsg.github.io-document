(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{407:function(a,t,f){"use strict";f.r(t);var n=f(45),l=Object(n.a)({},(function(){var a=this,t=a.$createElement,f=a._self._c||t;return f("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[f("h1",{attrs:{id:"math-基本数学函数-不用"}},[f("a",{staticClass:"header-anchor",attrs:{href:"#math-基本数学函数-不用"}},[a._v("#")]),a._v(" math-基本数学函数-.-不用")]),a._v(" "),f("h1",{attrs:{id:"math"}},[f("a",{staticClass:"header-anchor",attrs:{href:"#math"}},[a._v("#")]),a._v(" math")]),a._v(" "),f("p",[a._v("math 包实现的就是数学函数计算。")]),a._v(" "),f("p",[a._v("基本用不到，记录一下，可能用得到，人嘛总要点梦想")]),a._v(" "),f("h2",{attrs:{id:"三角函数"}},[f("a",{staticClass:"header-anchor",attrs:{href:"#三角函数"}},[a._v("#")]),a._v(" 三角函数")]),a._v(" "),f("p",[a._v("正弦函数，反正弦函数，双曲正弦，反双曲正弦")]),a._v(" "),f("div",{staticClass:"language- extra-class"},[f("pre",{pre:!0,attrs:{class:"language-text"}},[f("code",[a._v("- func Sin(x float64) float64\n- func Asin(x float64) float64\n- func Sinh(x float64) float64\n- func Asinh(x float64) float64\n")])])]),f("p",[a._v("一次性返回 sin,cos")]),a._v(" "),f("ul",[f("li",[a._v("func Sincos(x float64) (sin, cos float64)")])]),a._v(" "),f("p",[a._v("余弦函数，反余弦函数，双曲余弦，反双曲余弦")]),a._v(" "),f("div",{staticClass:"language- extra-class"},[f("pre",{pre:!0,attrs:{class:"language-text"}},[f("code",[a._v("- func Cos(x float64) float64\n- func Acos(x float64) float64\n- func Cosh(x float64) float64\n- func Acosh(x float64) float64\n")])])]),f("p",[a._v("正切函数，反正切函数，双曲正切，反双曲正切")]),a._v(" "),f("div",{staticClass:"language- extra-class"},[f("pre",{pre:!0,attrs:{class:"language-text"}},[f("code",[a._v("- func Tan(x float64) float64\n- func Atan(x float64) float64 和 func Atan2(y, x float64) float64\n- func Tanh(x float64) float64\n- func Atanh(x float64) float64\n")])])]),f("h2",{attrs:{id:"幂次函数"}},[f("a",{staticClass:"header-anchor",attrs:{href:"#幂次函数"}},[a._v("#")]),a._v(" 幂次函数")]),a._v(" "),f("div",{staticClass:"language- extra-class"},[f("pre",{pre:!0,attrs:{class:"language-text"}},[f("code",[a._v("- func Cbrt(x float64) float64 // 立方根函数\n- func Pow(x, y float64) float64  // x 的幂函数\n- func Pow10(e int) float64 // 10 根的幂函数\n- func Sqrt(x float64) float64 // 平方根\n- func Log(x float64) float64 // 对数函数\n- func Log10(x float64) float64 // 10 为底的对数函数\n- func Log2(x float64) float64  // 2 为底的对数函数\n- func Log1p(x float64) float64 // log(1 + x)\n- func Logb(x float64) float64 // 相当于 log2(x) 的绝对值\n- func Ilogb(x float64) int // 相当于 log2(x) 的绝对值的整数部分\n- func Exp(x float64) float64 // 指数函数\n- func Exp2(x float64) float64 // 2 为底的指数函数\n- func Expm1(x float64) float64 // Exp(x) - 1\n")])])]),f("h2",{attrs:{id:"特殊函数"}},[f("a",{staticClass:"header-anchor",attrs:{href:"#特殊函数"}},[a._v("#")]),a._v(" 特殊函数")]),a._v(" "),f("div",{staticClass:"language- extra-class"},[f("pre",{pre:!0,attrs:{class:"language-text"}},[f("code",[a._v("- func Inf(sign int) float64  // 正无穷\n- func IsInf(f float64, sign int) bool // 是否正无穷\n- func NaN() float64 // 无穷值\n- func IsNaN(f float64) (is bool) // 是否是无穷值\n- func Hypot(p, q float64) float64 // 计算直角三角形的斜边长\n")])])]),f("h2",{attrs:{id:"类型转化函数"}},[f("a",{staticClass:"header-anchor",attrs:{href:"#类型转化函数"}},[a._v("#")]),a._v(" 类型转化函数")]),a._v(" "),f("div",{staticClass:"language- extra-class"},[f("pre",{pre:!0,attrs:{class:"language-text"}},[f("code",[a._v("- func Float32bits(f float32) uint32  // float32 和 unit32 的转换\n- func Float32frombits(b uint32) float32 // uint32 和 float32 的转换\n- func Float64bits(f float64) uint64 // float64 和 uint64 的转换\n- func Float64frombits(b uint64) float64 // uint64 和 float64 的转换\n")])])]),f("h2",{attrs:{id:"其他函数"}},[f("a",{staticClass:"header-anchor",attrs:{href:"#其他函数"}},[a._v("#")]),a._v(" 其他函数")]),a._v(" "),f("div",{staticClass:"language- extra-class"},[f("pre",{pre:!0,attrs:{class:"language-text"}},[f("code",[a._v("- func Abs(x float64) float64 // 绝对值函数\n- func Ceil(x float64) float64  // 向上取整\n- func Floor(x float64) float64 // 向下取整\n- func Mod(x, y float64) float64 // 取模\n- func Modf(f float64) (int float64, frac float64) // 分解 f，以得到 f 的整数和小数部分\n- func Frexp(f float64) (frac float64, exp int) // 分解 f，得到 f 的位数和指数\n- func Max(x, y float64) float64  // 取大值\n- func Min(x, y float64) float64  // 取小值\n- func Dim(x, y float64) float64 // 复数的维数\n- func J0(x float64) float64  // 0 阶贝塞尔函数\n- func J1(x float64) float64  // 1 阶贝塞尔函数\n- func Jn(n int, x float64) float64 // n 阶贝塞尔函数\n- func Y0(x float64) float64  // 第二类贝塞尔函数 0 阶\n- func Y1(x float64) float64  // 第二类贝塞尔函数 1 阶\n- func Yn(n int, x float64) float64 // 第二类贝塞尔函数 n 阶\n- func Erf(x float64) float64 // 误差函数\n- func Erfc(x float64) float64 // 余补误差函数\n- func Copysign(x, y float64) float64 // 以 y 的符号返回 x 值\n- func Signbit(x float64) bool // 获取 x 的符号\n- func Gamma(x float64) float64 // 伽玛函数\n- func Lgamma(x float64) (lgamma float64, sign int) // 伽玛函数的自然对数\n- func Ldexp(frac float64, exp int) float64 // value 乘以 2 的 exp 次幂\n- func Nextafter(x, y float64) (r float64) // 返回参数 x 在参数 y 方向上可以表示的最接近的数值，若 x 等于 y，则返回 x\n- func Nextafter32(x, y float32) (r float32) // 返回参数 x 在参数 y 方向上可以表示的最接近的数值，若 x 等于 y，则返回 x\n- func Remainder(x, y float64) float64 // 取余运算\n- func Trunc(x float64) float64 // 截取函数\n")])])])])}),[],!1,null,null,null);t.default=l.exports}}]);