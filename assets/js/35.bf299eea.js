(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{395:function(t,a,s){"use strict";s.r(a);var n=s(45),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_3-常量跟变量、键盘输入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-常量跟变量、键盘输入"}},[t._v("#")]),t._v(" 3. 常量跟变量、键盘输入")]),t._v(" "),s("p",[t._v("#　为什么需要变量")]),t._v(" "),s("p",[t._v("变量是程序的基本组成单位：不论是使用哪种高级程序语言编写程序，变量都是其程序的基本组成单位。")]),t._v(" "),s("h1",{attrs:{id:"变量的介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量的介绍"}},[t._v("#")]),t._v(" 变量的介绍")]),t._v(" "),s("ol",[s("li",[t._v("变量的概念\n"),s("ol",[s("li",[t._v("变量相当于内存中一个数据存储空间的表示，你可以把变量看做是一个房间的门牌号，通过门牌号我们可以找到房间，同样的道理，通过变量名可以访问到变量 (值)。")])])]),t._v(" "),s("li",[t._v("变量的使用步骤\n"),s("ol",[s("li",[t._v("声明变量(也叫:定义变量)")]),t._v(" "),s("li",[t._v("非变量赋值")]),t._v(" "),s("li",[t._v("使用变量")])])])]),t._v(" "),s("h1",{attrs:{id:"变量使用注意事项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量使用注意事项"}},[t._v("#")]),t._v(" 变量使用注意事项")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("变量表示内存中的一个存储区域")])]),t._v(" "),s("li",[s("p",[t._v("该区域有自己的名称（变量名）和类型（数据类型）")])]),t._v(" "),s("li",[s("p",[t._v("Golang 变量使用的三种方式")]),t._v(" "),s("ol",[s("li",[t._v("第一种：指定变量类型，"),s("strong",[t._v("声明后若不赋值，使用默认值")])]),t._v(" "),s("li",[t._v("第二种：根据值自行判定变量类型("),s("strong",[t._v("类型推导")]),t._v(")")]),t._v(" "),s("li",[t._v("第三种：省略 var, 注意 :=左侧的变量不应该是已经声明过的，否则会导致编译错误")])])]),t._v(" "),s("li",[s("p",[t._v("多变量声明")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("在编程中，有时我们需要一次性声明多个变量，Golang 也提供这样的语法")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//该案例演示 golan如何一次性声明多个变量")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// var n1, n2, n3 int")]),t._v("\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"n1=”,n1,"')]),t._v("n2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('",n2,"')]),t._v("n3"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('",n3)\n\n\t//一次性声明多个变量的方式2\n\tvar nl, name, n3= 100,tom, 888\n\tfmt Println("')]),t._v("n1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('",n1,"')]),t._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('", name,"')]),t._v("n3"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('", n3)\n\n\t//一次性声明多个变量的方式3,同样可以使用类型推导\n\tnl, name n3 100,"')]),t._v("tom"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('",888\n\tfmt Println("')]),t._v("n1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('",nl,"')]),t._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('", name,"')]),t._v("n3"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v('"'),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])])]),t._v(" "),s("li",[s("p",[t._v("如何一次性声明多个全局变量【在 go 中函数外部定义变量就是全局变量】")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200724150958285.png",alt:"image-20200724150958285"}})])]),t._v(" "),s("li",[s("p",[t._v("该区域的数据值可以在同一类型范围内不断变化(重点)")])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200724151020798.png",alt:"image-20200724151020798"}})]),t._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[s("p",[t._v("变量在 同一个作用域(在一个函数或者在代码块)内不能重名")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200724151058851.png",alt:"image-20200724151058851"}})])]),t._v(" "),s("li",[s("p",[t._v("变量= 变量名+ 值+ 数据类型，这一点请大家注意，变量的三要素")])]),t._v(" "),s("li",[s("p",[t._v("Golang 的变量如果没有赋初值，编译器会使用默认值, 比如 int 默认值 0 string 默认值为空串，小数默认为 0")])])])])]),t._v(" "),s("h1",{attrs:{id:"变量的声明-初始化和赋值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量的声明-初始化和赋值"}},[t._v("#")]),t._v(" 变量的声明，初始化和赋值")]),t._v(" "),s("p",[t._v("Go语言中的变量需要声明后才能使用，同一作用域内不支持重复声明。 并且Go语言的变量声明后必须使用。")]),t._v(" "),s("h2",{attrs:{id:"标准声明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标准声明"}},[t._v("#")]),t._v(" 标准声明")]),t._v(" "),s("p",[t._v("Go语言的变量声明格式为：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" 变量名 变量类型\n")])])]),s("p",[t._v("变量声明以关键字"),s("code",[t._v("var")]),t._v("开头，变量类型放在变量的后面，行尾无需分号。 举个例子：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" age "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" isOk "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v("\n")])])]),s("h2",{attrs:{id:"批量声明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#批量声明"}},[t._v("#")]),t._v(" 批量声明")]),t._v(" "),s("p",[t._v("每声明一个变量就需要写"),s("code",[t._v("var")]),t._v("关键字会比较繁琐，go语言中还支持批量变量声明：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    a "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n    b "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n    c "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v("\n    d "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float32")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h2",{attrs:{id:"变量的初始化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量的初始化"}},[t._v("#")]),t._v(" 变量的初始化")]),t._v(" "),s("p",[t._v("Go语言在声明变量的时候，会自动对变量对应的内存区域进行初始化操作。每个变量会被初始化成其类型的默认值，例如： 整型和浮点型变量的默认值为"),s("code",[t._v("0")]),t._v("。 字符串变量的默认值为"),s("code",[t._v("空字符串")]),t._v("。 布尔型变量默认为"),s("code",[t._v("false")]),t._v("。 切片、函数、指针变量的默认为"),s("code",[t._v("nil")]),t._v("。")]),t._v(" "),s("p",[t._v("当然我们也可在声明变量的时候为其指定初始值。变量初始化的标准格式如下：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" 变量名 类型 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 表达式\n")])])]),s("p",[t._v("举个例子：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Q1mi"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" age "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),t._v("\n")])])]),s("p",[t._v("或者一次初始化多个变量")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Q1mi"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("\n")])])]),s("h3",{attrs:{id:"类型推导"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型推导"}},[t._v("#")]),t._v(" 类型推导")]),t._v(" "),s("p",[t._v("有时候我们会将变量的类型省略，这个时候编译器会根据等号右边的值来推导变量的类型完成初始化。")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Q1mi"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),t._v("\n")])])]),s("h3",{attrs:{id:"短变量声明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#短变量声明"}},[t._v("#")]),t._v(" 短变量声明")]),t._v(" "),s("p",[t._v("在函数内部，可以使用更简略的 "),s("code",[t._v(":=")]),t._v(" 方式声明并初始化变量。")]),t._v(" "),s("p",[t._v("因其短小、灵活、故而在局部变量的声明和初始化中主要使用短变量声明。")]),t._v(" "),s("p",[s("code",[t._v("var")]),t._v("声明通常是为那些跟初始化表达式类型不一致的局部变量保留的，或者用于后面才对变量赋值以及变量初始值不重要的情况下。")]),t._v(" "),s("p",[t._v("注意：使用短变量声明最少声明一个新变量，否则代码编译无法通过。")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 全局变量m")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" m "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tn "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n\tm "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此处声明局部变量m")]),t._v("\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"匿名变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#匿名变量"}},[t._v("#")]),t._v(" 匿名变量")]),t._v(" "),s("p",[t._v("在使用多重赋值时，如果想要忽略某个值，可以使用"),s("code",[t._v("匿名变量（anonymous variable）")]),t._v("。 匿名变量用一个下划线"),s("code",[t._v("_")]),t._v("表示，例如：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Q1mi"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"x="')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"y="')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("匿名变量不占用命名空间，不会分配内存，所以匿名变量之间不存在重复声明。 (在"),s("code",[t._v("Lua")]),t._v("等编程语言里，匿名变量也被叫做哑元变量。)")]),t._v(" "),s("h2",{attrs:{id:"变量注意事项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量注意事项"}},[t._v("#")]),t._v(" 变量注意事项")]),t._v(" "),s("ol",[s("li",[t._v("函数外的每个语句都必须以关键字开始（var、const、func等）包含变量")]),t._v(" "),s("li",[s("code",[t._v(":=")]),t._v("不能使用在函数外。")]),t._v(" "),s("li",[s("code",[t._v("_")]),t._v("多用于占位，表示忽略值")])]),t._v(" "),s("h1",{attrs:{id:"程序中-号的使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#程序中-号的使用"}},[t._v("#")]),t._v(" 程序中 +号的使用")]),t._v(" "),s("ol",[s("li",[t._v("当左右两边都是数值型时，则做加法运算")]),t._v(" "),s("li",[t._v("当左右两边都是字符串，则做字符串拼接")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200727104204283.png",alt:"image-20200727104204283"}})]),t._v(" "),s("h1",{attrs:{id:"变量的生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量的生命周期"}},[t._v("#")]),t._v(" 变量的生命周期")]),t._v(" "),s("p",[t._v("生命周期指在程序执行过程中变量存在的时间段，包级别变量的生命周期是整个程序的执行时间")]),t._v(" "),s("p",[t._v("相反")]),t._v(" "),s("p",[t._v("局部变量有一个动态的生命周期，每次执行声明语句时创建一个新的实体，变量一直生存到它变得不可访问，这时它占用的存储空间就会被回收")]),t._v(" "),s("p",[t._v("函数的参数和返回值也是局部变量，它们在其闭包函数被调用的时候创建。")]),t._v(" "),s("p",[t._v("那么垃圾回收器如何知道一个变量是否可以被回收，基本思路是每个包级的变量以及每个当前执行函数的局部变量，可以作为寻找该变量的路径的源头，通过指针和其他方式的引用可以找到变量，如果变量的路径不存在，就会变得不可访问，因此它不会影响任何其他的计算过程")]),t._v(" "),s("h1",{attrs:{id:"标识符的命名规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标识符的命名规范"}},[t._v("#")]),t._v(" 标识符的命名规范")]),t._v(" "),s("h2",{attrs:{id:"标识符概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标识符概念"}},[t._v("#")]),t._v(" 标识符概念")]),t._v(" "),s("ol",[s("li",[t._v("Golang 对各种变量、方法、函数等命名时使用的字符序列称为标识符")]),t._v(" "),s("li",[t._v("凡是自己可以起名字的地方都叫标识符")])]),t._v(" "),s("h2",{attrs:{id:"标识符的命名规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标识符的命名规则"}},[t._v("#")]),t._v(" 标识符的命名规则")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("由 26 个英文字母大小写，0-9 ，_ 组成")])]),t._v(" "),s("li",[s("p",[t._v("数字不可以开头。var num int //ok var 3num int //error")])]),t._v(" "),s("li",[s("p",[t._v("Golang 中严格区分大小写")]),t._v(" "),s("ol",[s("li",[t._v("var num int")]),t._v(" "),s("li",[t._v("var Num int")]),t._v(" "),s("li",[t._v("在 golang 中，num 和 Num 是两个不同的变量")])])]),t._v(" "),s("li",[s("p",[t._v("标识符不能包含空格")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200813103227808.png",alt:"image-20200813103227808"}})])]),t._v(" "),s("li",[s("p",[t._v('下划线"_"本身在 Go 中是一个特殊的标识符，称为 空标识符。可以代表任何其它的标识符，但是它对应的值会被忽略(比如：忽略某个返回值)。所以 仅能被作为占位符使用，不能作为标识符使用')]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200813103254512.png",alt:"image-20200813103254512"}})])]),t._v(" "),s("li",[s("p",[t._v("不能以系统 保留关键字作为标识符（一共有 25 个），比如 break，if 等等...")])])]),t._v(" "),s("h2",{attrs:{id:"标识符的案例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标识符的案例"}},[t._v("#")]),t._v(" 标识符的案例")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v("hello "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ok")]),t._v("\nhello12 "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//ok")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("hello "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// error ,不能以数字开头")]),t._v("\nh"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("b "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// error ,不能使用 -")]),t._v("\nx h "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// error, 不能含有空格")]),t._v("\nh_4 "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ok")]),t._v("\n_ab "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ok")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ok , 我们要求大家不要这样使用")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float32")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ok , 我们要求大家不要这样使用")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// error")]),t._v("\nAbc "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ok")]),t._v("\n")])])]),s("h2",{attrs:{id:"标识符命名注意事项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标识符命名注意事项"}},[t._v("#")]),t._v(" 标识符命名注意事项")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("包名：保持 package 的名字和目录保持一致，尽量采取有意义的包名，简短，有意义，不要和标准库不要冲突 fmt")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200813103426565.png",alt:"image-20200813103426565"}})])]),t._v(" "),s("li",[s("p",[t._v("变量名、函数名、常量名：采用驼峰法")]),t._v(" "),s("ol",[s("li",[t._v("var stuName string = “tom” 形式: xxxYyyyyZzzz ...")]),t._v(" "),s("li",[t._v("var goodPrice float32 = 1234.5")])])]),t._v(" "),s("li",[s("p",[t._v("如果变量名、函数名、常量名首字母大写，则可以被其他的包访问；如果首字母小写，则只能在本包中使用 ( 注：可以简单的理解成， 首字母大写是公开的， 首字母小写是私有的) ,在 golang 没有public , private 等关键字")])]),t._v(" "),s("li",[s("p",[s("img",{attrs:{src:"C:%5Cpython%5C%E7%AC%94%E8%AE%B0%5CGO%5C%E5%9F%BA%E7%A1%80%5Cimage-20200813103534014.png",alt:"image-20200813103534014"}})])]),t._v(" "),s("li",[s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200813103540258.png",alt:"image-20200813103540258"}})])])]),t._v(" "),s("h1",{attrs:{id:"系统保留关键字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#系统保留关键字"}},[t._v("#")]),t._v(" 系统保留关键字")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200813103607946.png",alt:"image-20200813103607946"}})]),t._v(" "),s("h1",{attrs:{id:"系统的预定义标识符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#系统的预定义标识符"}},[t._v("#")]),t._v(" 系统的预定义标识符")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200813103619979.png",alt:"image-20200813103619979"}})]),t._v(" "),s("h1",{attrs:{id:"常量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常量"}},[t._v("#")]),t._v(" 常量")]),t._v(" "),s("p",[t._v("相对于变量，常量是恒定不变的值，多用于定义程序运行期间不会改变的那些值。 常量的声明和变量声明非常类似，只是把"),s("code",[t._v("var")]),t._v("换成了"),s("code",[t._v("const")]),t._v("，常量在定义的时候必须赋值。")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" pi "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.1415")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" e "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.7182")]),t._v("\n")])])]),s("p",[t._v("声明了"),s("code",[t._v("pi")]),t._v("和"),s("code",[t._v("e")]),t._v("这两个常量之后，在整个程序运行期间它们的值都不能再发生变化了。")]),t._v(" "),s("p",[t._v("多个常量也可以一起声明：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    pi "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.1415")]),t._v("\n    e "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.7182")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("const同时声明多个常量时，如果省略了值则表示和上面一行的值相同。 例如：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    n1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\n    n2\n    n3\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("上面示例中，常量"),s("code",[t._v("n1")]),t._v("、"),s("code",[t._v("n2")]),t._v("、"),s("code",[t._v("n3")]),t._v("的值都是100，因为变量声明没指定值，那么就会加载上一个变量的值。")]),t._v(" "),s("h1",{attrs:{id:"常量-iota"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常量-iota"}},[t._v("#")]),t._v(" 常量-iota")]),t._v(" "),s("p",[s("code",[t._v("iota")]),t._v("是go语言的常量计数器，只能在常量的表达式中使用。")]),t._v(" "),s("p",[s("code",[t._v("iota")]),t._v("在const关键字出现时将被重置为0。const中每新增一行常量声明将使"),s("code",[t._v("iota")]),t._v("计数一次(iota可理解为const语句块中的行索引)。 使用iota能简化定义，在定义枚举时很有用。")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t\tn1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("iota")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//0")]),t._v("\n\t\tn2        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1")]),t._v("\n\t\tn3        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2")]),t._v("\n\t\tn4        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//3")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h2",{attrs:{id:"几个常见的iota示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#几个常见的iota示例"}},[t._v("#")]),t._v(" 几个常见的"),s("code",[t._v("iota")]),t._v("示例:")]),t._v(" "),s("p",[t._v("使用"),s("code",[t._v("_")]),t._v("跳过某些值")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t\tn1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("iota")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//0")]),t._v("\n\t\tn2        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),t._v("\n\t\tn4        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//3")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[s("code",[t._v("iota")]),t._v("声明中间插队")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t\tn1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("iota")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//0")]),t._v("\n\t\tn2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//100")]),t._v("\n\t\tn3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("iota")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2")]),t._v("\n\t\tn4        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//3")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" n5 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("iota")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//0")]),t._v("\n")])])]),s("p",[t._v("定义数量级 （这里的"),s("code",[t._v("<<")]),t._v("表示左移操作，"),s("code",[t._v("1<<10")]),t._v("表示将1的二进制表示向左移10位，也就是由"),s("code",[t._v("1")]),t._v("变成了"),s("code",[t._v("10000000000")]),t._v("，也就是十进制的1024。同理"),s("code",[t._v("2<<2")]),t._v("表示将2的二进制表示向左移2位，也就是由"),s("code",[t._v("10")]),t._v("变成了"),s("code",[t._v("1000")]),t._v("，也就是十进制的8。）")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("iota")]),t._v("\n\t\tKB "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("iota")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\tMB "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("iota")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\tGB "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("iota")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\tTB "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("iota")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\tPB "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("iota")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("多个"),s("code",[t._v("iota")]),t._v("定义在一行")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t\ta"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("iota")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("iota")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1,2")]),t._v("\n\t\tc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" d                      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2,3")]),t._v("\n\t\te"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" f                      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//3,4")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h1",{attrs:{id:"键盘输入语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#键盘输入语句"}},[t._v("#")]),t._v(" 键盘输入语句")]),t._v(" "),s("p",[t._v("在编程中，需要接收用户输入的数据，就可以使用键盘输入语句来获取。InputDemo.go")]),t._v(" "),s("h2",{attrs:{id:"使用方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用方式"}},[t._v("#")]),t._v(" 使用方式")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("导入 fmt 包")])]),t._v(" "),s("li",[s("p",[t._v("调用 fmt 包的 fmt.Scanln() 或者 fmt.Scanf()")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("fmt.Scanln()")]),t._v(" "),s("p",[t._v("​\t"),s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200813201549223.png",alt:"image-20200813201549223"}})])]),t._v(" "),s("li",[s("p",[t._v("fmt.Scanf()")]),t._v(" "),s("p",[t._v("​\t"),s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200813201601183.png",alt:"image-20200813201601183"}})])])])])]),t._v(" "),s("h2",{attrs:{id:"演示"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#演示"}},[t._v("#")]),t._v(" 演示")]),t._v(" "),s("p",[t._v("要求：可以从控制台接收用户信息，【姓名，年龄，薪水, 是否通过考试 】")]),t._v(" "),s("h2",{attrs:{id:"使用-fmt-scanln-获取"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-fmt-scanln-获取"}},[t._v("#")]),t._v(" 使用 fmt.Scanln() 获取")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200813201632251.png",alt:"image-20200813201632251"}})]),t._v(" "),s("h2",{attrs:{id:"使用-fmt-scanf-获取"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-fmt-scanf-获取"}},[t._v("#")]),t._v(" 使用 fmt.Scanf() 获取")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/linux91/document-img/raw/master/img/image-20200813201641511.png",alt:"image-20200813201641511"}})])])}),[],!1,null,null,null);a.default=e.exports}}]);